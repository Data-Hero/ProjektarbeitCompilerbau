/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options { STATIC = false;}

PARSER_BEGIN(NewAwkParser)
package de.fhdo.fsc.project;

import de.fhdo.fsc.project.ast.*;
import java.util.*;
import de.fhdo.fsc.project.errors.*;

public class NewAwkParser {
    private LinkedList<CompilerError> errors = new LinkedList();

    public LinkedList<CompilerError> getErrors() {
        return this.errors;
    }
}

PARSER_END(NewAwkParser)

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") > // Skip single line comments
}

// Types
TOKEN :
{
    < INT: "int" >
|   < DOUBLE : "double">
|   < CHAR : "char">
|   < BOOLEAN : "bool">
|   < STRING : "string" >
|   < ARRAY : (<INT> | <DOUBLE> | <CHAR> | <BOOLEAN> | <STRING>) ("[]")* >
|   < VOID : "void" >
}

// Operators
TOKEN : {
    <SUM_OPERATOR: "+" | "-">
|   <PROD_OPERATOR: "*" | "/" | "%">
|   <BIN_COMPARE_OPERATOR: ">=" | ">" | "<=" | "<" | "==" | "!=">
|   <BIN_GATE_OPERATOR: "||" | "&&">
}

// Keywords
TOKEN :
{
    < SMARTSWITCH : "@">
|   < RETURN: "return">
|   < ENUM_SEPERATOR: ",">
|   < SEMICOLON: ";">
|   < IF: "if">
|   < ELSE: "else">
|   < WHILE: "while">
|   < FOREACH: "foreach">
|   < IN: "in">
|   < OPEN_BLOCK: "{">
|   < CLOSE_BLOCK: "}">
}

// Literals
TOKEN :
{
    "(" | ")" | "!" | "--" | "++" | "+" | "-" | "*" | "/" | "%" | ":" | "[" | "]"
|   <INTEGER_LITERAL: <DECIMAL_LITERAL>>
|   <#DECIMAL_LITERAL: ("+" | "-")? ["0"-"9"] (["0"-"9"])*>
|   <FLOATING_POINT_LITERAL: ("+" | "-")? (["0"-"9"])+ "." (["0"-"9"])*>
|   <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|   <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
|   <TYPE_LITERAL: ">" ( ~["<",">","\\","\n","\r"] | "\\" ( [">", "<", "n","t","b","r","f","\\"] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "<">
|   <BOOLEAN_LITERAL: "true" | "false">
}

// Built-in Functions
TOKEN :
{
    < CONTERT_FUNCTION: ( "convert" )>
|   < CHECKTYPE_FUNCTION: ( "isType" )>
|   < LENGTH_FUNCTION: ( "length" )>
|   < READ_FUNCTION: ( "read" )>
|   < READBool_FUNCTION: ( "readBool" )>
|   < READInt_FUNCTION: ( "readInteger" )>
|   < READDouble_FUNCTION: ( "readDouble" )>
|   < WRITE_FUNCTION: ( "write" )>
|   < GET_FUMCTION: ( "get" )>
|   < SET_FUMCTION: ( "set" )>
}

// Identifier
TOKEN :
{
    < #LETTER: ["A"-"Z","_","a"-"z"]>
|   < #DIGIT: ["0"-"9"]>
|   < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
}

JAVACODE
void errorSkipTo(int... kinds) {
  Token t;
  boolean contains = false;
  do {
    t = getNextToken();

    for (int kind : kinds) {
        contains = t.kind == kind;

        if (contains) {
            break;
        }
    }
  } while (!contains && t.kind != EOF);
}

ASTProgram Program():{
    ASTBlock result = new ASTBlock();
    ASTProgram program = new ASTProgram(result);
    ASTNode node = null;
    boolean first = true;
} {
    ( LOOKAHEAD(3) try {
        node = FunctionDeclaration() { result.add(node); }
    } catch (ParseException e) {
        errors.add(new SyntaxError(e.getMessage(), node.getStart(), node.getEnd()));
        errorSkipTo(SEMICOLON, CLOSE_BLOCK);
    } )*

    ( LOOKAHEAD(2) try {
        (node = Statement() | node = VariableDeclaration()) { if (first) result.setToken(node.getStart(), node.getEnd()); else result.setEnd(node.getEnd()); result.add(node); }
    } catch (ParseException e) {
        errors.add(new SyntaxError(e.getMessage(), node.getStart(), node.getEnd()));
        errorSkipTo(SEMICOLON, CLOSE_BLOCK);
    } )+
    <EOF>
    { return program; }

}

ASTStatement Statement():{
    ASTStatement result = null;
    ASTExpression expression = null;
    Token end = null;
} {
    try {
        (result = Block() | result = WhileStatement() | result = ForeachStatement() | result = IfStatement()
        | result = WriteStatement() | result = Set() | expression = Expression() end = ";"
        { result = new ASTExpressionStatement(expression, end); })
        { return result; }
    } catch (ParseException e) {
        if (result != null) {
            errors.add(new SyntaxError(e.getMessage(), result.getStart(), result.getEnd()));
            errorSkipTo(CLOSE_BLOCK);
        } else {
            errors.add(new SyntaxError(e.getMessage()));
            errorSkipTo(SEMICOLON);
        }
    }
    { return new ASTNoneStatement(); }
}

ASTVariableDeclaration VariableDeclaration():{
    Token type, id, end;
    ASTExpression result = null;
} {
    LOOKAHEAD(5) type = Datatype() id = Identifier() [ "=" result = Expression() ] end = ";"
    { return new ASTVariableDeclaration(type, id, result, end); } |
    type = Datatype() id = Identifier() [ "=" Expression() result = SmartSwitch() ] end = ";"
    { return new ASTVariableDeclaration(type, id, result, end); }
}

ASTBlock Block():{
    ASTBlock result = new ASTBlock();
    ASTNode node = null;
    Token start, end;
} {
    start = "{" ( try {
        (node = Statement() | node = VariableDeclaration() ) { result.add(node); }
    } catch (ParseException e) {
        errors.add(new SyntaxError(e.getMessage(), result.getStart(), result.getEnd()));
        errorSkipTo(SEMICOLON, CLOSE_BLOCK);
    } )* end = "}"
    { result.setToken(start, end); return result; }
}

ASTBlock FunctionBlock():{
    ASTBlock result = new ASTBlock();
    ASTNode node;
    Token start, end;
} {
    start = "{" ( try {
        (node = Statement() | node = VariableDeclaration() ) { result.add(node); }
    } catch (ParseException e) {
        errors.add(new SyntaxError(e.getMessage(), result.getStart(), result.getEnd()));
        errorSkipTo(SEMICOLON, CLOSE_BLOCK);
    } )*

    ( try {
        node = ReturnStatement() { result.add(node); }
    } catch (ParseException e) {
        errors.add(new SyntaxError(e.getMessage(), result.getStart(), result.getEnd()));
        errorSkipTo(SEMICOLON, CLOSE_BLOCK);
    } )?

    end = "}"
    { result.setToken(start, end); return result; }
}


ASTExpression ArrayExpression():{
    Token id, start, end;
    ASTExpression expr;
    List<ASTExpression> elements = new LinkedList();
} {
    start = "[" (expr = Expression() { elements.add(expr); } ("," expr = Expression() { elements.add(expr); } )* )? end = "]"
    { return new ASTArrayExpression(elements,  start, end); }
}

ASTExpression Expression():{
    Token id;
    ASTExpression result, expr;
} {
    (LOOKAHEAD(2) id = Identifier() "=" expr = Expression() { result = new ASTAssignment(id, expr); }
    | result = LogicalExpression())
    { return result; }
}

ASTExpression LogicalExpression():{
    Token operator;
    ASTExpression left, right;
} {
    left = CompareExpression() ( operator = <BIN_GATE_OPERATOR> right = CompareExpression() { left = new ASTLogical(operator, left, right); } )* { return left; }
}

ASTExpression CompareExpression():{
    Token operator;
    ASTExpression left, right;
} {
    left = AdditiveExpression() [operator = <BIN_COMPARE_OPERATOR> right = AdditiveExpression() { left = new ASTCompare(operator, left, right); } ] { return left; }
}

ASTExpression AdditiveExpression():{
    Token operator;
    ASTExpression left, right;
} {
    left = MultiplicativeExpression() (operator = <SUM_OPERATOR> right = AdditiveExpression() { left = new ASTArithmeticOperation(operator, left, right); } )* { return left; }
}

ASTExpression MultiplicativeExpression():{
    Token operator;
    ASTExpression left, right;
} {
    left = UnaryExpression() (operator = <PROD_OPERATOR> right = MultiplicativeExpression() { left = new ASTArithmeticOperation(operator, left, right); } )* { return left; }
}

ASTExpression UnaryExpression():{
    Token operator;
    ASTExpression result;
 } {
    ((operator = <SUM_OPERATOR> | operator = "!" ) result = UnaryExpression() { result = new ASTUnaryOperation(operator, result); } | result = Atom())
    { return result; }
}

ASTExpression Atom():{
    ASTExpression result;
    Token id;
    Token increment = null;
} {
    (LOOKAHEAD(2) result = FunctionCall()
|   id = Identifier() [increment="++"|increment="--"] { result = new ASTPostOperation(id, increment); }
|   (increment = "++"| increment = "--") id = Identifier()  { result = new ASTPreOperation(increment, id); }
|   id = <INTEGER_LITERAL> { result = new ASTLiteral(id); }
|   id = <FLOATING_POINT_LITERAL> { result = new ASTLiteral(id); }
|   id = <CHARACTER_LITERAL> { result = new ASTLiteral(id); }
|   id = <STRING_LITERAL> { result = new ASTLiteral(id); }
|   id = <BOOLEAN_LITERAL> { result = new ASTLiteral(id); }
|   "(" result = Expression() ")"
|   result = ArrayExpression()
|   result = IsType()
|   result = Convert()
|   result = Length()
|   result = Read()
|   result = Get()
|   result = SmartSwitch())
{ return result; }
}

ASTFunctionCall FunctionCall():{
    Token id, end;
    ASTExpression expression;
    List<ASTExpression> parameter = new ArrayList();
} {
    (id = Identifier() "(" [expression = LogicalExpression() { parameter.add(expression); } (<ENUM_SEPERATOR> expression = LogicalExpression() { parameter.add(expression); } )*] end = ")" )
    { return new ASTFunctionCall(id, parameter, end); }
}

Token Identifier():{} {
    <IDENTIFIER> { return token; }
}

// Function
ASTReturnStatement ReturnStatement():{
    Token start, end;
    ASTExpression expression = null;
} {
    start = "return" [expression = LogicalExpression()] end = ";"
    { return new ASTReturnStatement(start, expression, end); }
}

ASTFunctionDeclaration FunctionDeclaration():{
   Token functionId, returnType, paramId, paramType, end;
   ASTBlock block;
   LinkedList<ASTParameterDeclaration> parameter = new LinkedList();
} {
    returnType = Datatype() functionId = Identifier()
    "("
    (LOOKAHEAD(2) (paramType = Datatype() paramId = Identifier()) { parameter.add(new ASTParameterDeclaration(paramType, paramId)); } )?
    (LOOKAHEAD(3) "," (paramType = Datatype() paramId = Identifier()) { parameter.add(new ASTParameterDeclaration(paramType, paramId)); })*
    ")"
    block = FunctionBlock()
    { return new ASTFunctionDeclaration(returnType, functionId, parameter, block); }
}

ASTForeachStatement ForeachStatement():{
    Token id;
    ASTExpression expression;
    ASTStatement statement;
    Token start, type;
} {
    start = "foreach" "(" type = Datatype() id = Identifier() <IN> expression = Expression() ")" statement = Statement() { return new ASTForeachStatement(start, id, expression, statement, type); }
}

ASTWhileStatement WhileStatement():{
    ASTExpression expression;
    ASTStatement statement;
    Token start;
} {
    start = "while" "(" expression = LogicalExpression() ")" statement = Statement() { return new ASTWhileStatement(start, expression, statement); }
}

ASTIfStatement IfStatement():{
    ASTExpression expression;
    ASTStatement statement;
    Token start;
    ASTIfStatement elseIfStatement = null;
    ASTStatement elseStatement = null;
} {
    (start = "if" "(" expression =  LogicalExpression()  ")" statement = Statement()
    ("else" (elseIfStatement = IfStatement() | elseStatement = Statement()))? )
    { return new ASTIfStatement(start, expression, statement, elseIfStatement, elseStatement); }
}

// Smart Switch
ASTSmartSwitch SmartSwitch():{
    LinkedHashMap<ASTExpression, ASTBlock> cases = new LinkedHashMap();
    ASTBlock block;
    ASTExpression expression, selector;
    Token start, end;
} {
    start = "@"  expression = Expression() "{"
    ( selector = Expression() block = FunctionBlock() { cases.put(selector, block); } )+
    end = "}"
    { return new ASTSmartSwitch(start, end, expression, cases); }
}

// Integrated Funtions
ASTExpression IsType():{
    Token start, end, type;
    ASTExpression expression;
} {
     start = "isType" "(" type = Datatype() "," expression = Expression() end = ")"
     { return new ASTIsType(start, end, type, expression); }
}

ASTExpression Convert():{
    Token start, end, type;
    ASTExpression expression;
} {
     start = "convert" "(" type = Datatype() "," expression = Expression() end = ")"
     { return new ASTConvert(start, end, type, expression); }
}

ASTExpression Length():{
    Token start, end;
    ASTExpression expression;
} {
    (start = "length" "(" expression = Expression() end = ")")
    { return new ASTLength(start, end, expression); }
}

ASTExpression Read():{
    Token start, end;
    ASTExpression expression;
} {
    (LOOKAHEAD(3)start = "read" "(" expression = Expression() end = ")"
    { return new ASTRead(start, end, expression); } |
    start = "read" "(" end = ")" { return new ASTRead(start, end); } |
    start = "readBool" "(" end = ")" { return new ASTReadBoolean(start, end); } |
     start = "readInteger" "(" end = ")" { return new ASTReadInteger(start, end); } |
     start = "readDouble" "(" end = ")" { return new ASTReadDouble(start, end); } )
}

ASTWriteStatement WriteStatement():{
    Token start, end;
    ASTExpression pathExpression = null;
    ASTExpression sourceExpression;
} {
    (start = "write" "(" sourceExpression = Expression() ("," pathExpression = Expression())* ")" end = ";")
    { return new ASTWriteStatement(start, end, pathExpression, sourceExpression); }
}


ASTExpression Get():{
    Token start, end;
    ASTExpression arrayExpression, indexExpression;
} {
    start = "get" "(" arrayExpression = Expression() "," indexExpression = Expression() end = ")"
    { return new ASTGetExpression(start, end, arrayExpression, indexExpression); }
}


ASTSetStatement Set():{
    Token start, end;
    ASTExpression arrayExpression, indexExpression, elementExpression;
} {
    start = "set" "(" arrayExpression = Expression() "," indexExpression = Expression() "," elementExpression = Expression()  ")" end = ";"
    { return new ASTSetStatement(start, end, arrayExpression, indexExpression, elementExpression); }
}


// Datatype
Token Datatype():{} {
    (<DOUBLE> | <INT> | <CHAR> | <BOOLEAN> | <STRING> | <ARRAY> | <VOID>) { return token; }
}
