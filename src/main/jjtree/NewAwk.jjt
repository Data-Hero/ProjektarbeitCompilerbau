/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options { STATIC = false; LOOKAHEAD = 50; MULTI=true; VISITOR=true; NODE_EXTENDS="BaseNode";}

PARSER_BEGIN(NewAwkParser)
package de.fhdo.fsc.project;

import java.io.FileReader;

public class NewAwkParser {
    public static void main(String[] args) {
        try {
                NewAwkParser parser = new NewAwkParser(new FileReader("./src/main/test/test1.na"));
                SimpleNode node = parser.Start();
                node.dump("");
            } catch (Exception e) { System.out.println(e); }
    }
}
PARSER_END(NewAwkParser)

SKIP : {
    " "
|   "\t"
|   "\n"
|   "\r"
|   < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") > // Skip single line comments
}

// Keywords
TOKEN :
{
    < INT: "int" >
|   < DOUBLE : "double">
|   < CHAR : "char">
|   < BOOLEAN : "boolean">
|   < STRING : "String" >
|   < TYPE : "type">
|   < VOID : "void" >
|   < NULL: "null">
|   < SMARTSWITCH : "@">
|   < RETURN: "return">
|   < ENUM_SEPERATOR: ",">
|   < EXPRESSION_TERMINATOR: ";">
|   < LOOP_IF: "if">
|   < LOOP_ELSE: "else">
|   < LOOP_WHILE: "while">
|   < LOOP_FOREACH: "foreach">
}

// Datatypes
TOKEN :
{
    < #LETTER: ["A"-"Z","_","a"-"z"]>
|   < #DIGIT: ["0"-"9"]>
}

// Date
TOKEN :
{
    < DATE: < TWO_DIGIT >"-"< TWO_DIGIT>"-"< TWO_DIGIT ><TWO_DIGIT>>
|   < TWO_DIGIT: (["0"-"9"]) {2} >
|   < AMPM: "am"|"pm" >
|   < TIME: <TWO_DIGIT>":"<TWO_DIGIT> >
}

// Selector classes
TOKEN :
{
    < PUNCT: "punct" >
|   < GRAPH: "graph"> // Letters, numbers and punctuation
|   < LOWER: "lower"> // Lowercase Letters
|   < ALPHA: "alpha"> // Letters
|   < ALNUM: "alnum"> // Alphanumerics
|   < PRINT: "print"> // Letters, numb ers, punctuation and whitespace
|   < CNTRL: "cntrl"> // Control characters
|   < SPACE: "space"> // Space characters
|   < BLANK: "blank"> // Space and tab
|   < DIGITS: "digit">// Digits
}

// Literals
TOKEN :
{
    <INTEGER_LITERAL: <DECIMAL_LITERAL>>
|   <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|   <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])*>
|   <CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
|   <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
|   <TYPE_LITERAL: ">" ( ~["<",">","\\","\n","\r"] | "\\" ( [">", "<", "n","t","b","r","f","\\"] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "<">
}

// Built-in Functions
TOKEN :
{
    < CONTERT_FUNCTION: (".toBoolean()" | ".toCharacter()" | ".toDouble()" | ".toInteger()" | ".toString()" )>
|   < CHECKTYPE_FUNCTION: (".isBoolean()" | ".isCharacter()" | ".isDouble()" | ".isInteger()" | ".isString()" )>
}

// Identifier
TOKEN :
{
    < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
}

void DateTime() : {}{<DATE><TIME><AMPM>}

SimpleNode Start():{} {
    (Element())+ <EOF>
    { return jjtThis; }
}

// Base element
void Element():{} {
    ((Expression() <EXPRESSION_TERMINATOR>)
|   LoopDefinition()
|   FunctionDefinition()) // ToDo: Support multiple expressions function definitions
}

// Expressions
void Expression():{} {
    AssingmentExpression()
}

void AssingmentExpression():{} {
    [Datatype()] Identifier() ("=" LogicalExpression())*
}

void LogicalExpression():{} {
    CompareExpression() [("&&" | "||") LogicalExpression()]
}

void CompareExpression():{} {
    AdditiveExpression() [("==" | "!=" | "<=" | ">=" | "<" | ">") CompareExpression()]
}

void AdditiveExpression():{} {
    MultiplicativeExpression() [("+" |  "-") AdditiveExpression()]
}

void MultiplicativeExpression():{} {
    PrefixExpression() [("*" | "/") MultiplicativeExpression()]
}

void PowerExpression():{} {
    PrefixExpression() [("**" | "//") PowerExpression() ]
}

void ModuloExpression():{} {
    PrefixExpression() ["%" PowerExpression() ]
}

void PrefixExpression():{} {
    [("+" | "-" | "!")] UnaryExpression()
}

void UnaryExpression():{} {
    "(" Expression() ")"
    | FunctionCallExpression()
    | SmartSwitchDefinition()
    | Identifier()
    | <STRING_LITERAL>
    | <CHARACTER_LITERAL>
    | <TYPE_LITERAL>
    | <INTEGER_LITERAL>
    | <FLOATING_POINT_LITERAL>
    | <NULL>
}

void FunctionCallExpression():{} {
    Identifier() "(" [LogicalExpression() (<ENUM_SEPERATOR> LogicalExpression())*] ")"
}

void StringExpression():{} {
    <STRING_LITERAL>
    | Identifier()
    | <CHARACTER_LITERAL>
    | <INTEGER_LITERAL>
    | <FLOATING_POINT_LITERAL>
    | <NULL>
}

void Identifier():{} {
    <IDENTIFIER>
}


// Function
void FunctionReturnExpression():{} {
    <RETURN> [LogicalExpression()] <EXPRESSION_TERMINATOR>
}

void FunctionBodyDefinition():{} {
    "{" (Start())* (FunctionReturnExpression())? "}"  // ToDo remove Start from Body
}

void FunctionHeaderDefinition():{} {
    ReturnDatatype() Identifier() "(" (Datatype() Identifier())? (<ENUM_SEPERATOR> Datatype() Identifier())* ")"
}

void FunctionDefinition():{} {
    FunctionHeaderDefinition() FunctionBodyDefinition()
}

void LoopDefinition():{} {
    (   ((<LOOP_WHILE> "(" Identifier() ("==" LogicalExpression())* ")")
        //| (<LOOP_FOREACH> "(" Identifier() "in" Identifier() ")") // TODO: replace secound identifier with array
        )
        FunctionBodyDefinition()    )
    | (<LOOP_IF> "(" Identifier() ("==" LogicalExpression())* ")" FunctionBodyDefinition()
        (<LOOP_ELSE> <LOOP_IF> "(" Identifier() ("==" LogicalExpression())* ")" FunctionBodyDefinition())*
        (<LOOP_ELSE> FunctionBodyDefinition())?
      )
}


// Smart Switch
void SmartSwitchSelektor():{} {
    <PUNCT> | <GRAPH> | <LOWER> | <ALPHA> | <ALNUM> | <PRINT> | <CNTRL> | <SPACE> | <BLANK> | <DIGITS>
}


void SmartSwitchConditionDefinition():{} {
    ("!" ":" SmartSwitchSelektor() ":") | (":" SmartSwitchSelektor() ":") // 2 functions or OR seem like the only options
}

void SmartSwitchCaseDefinition():{} {
    SmartSwitchConditionDefinition() FunctionBodyDefinition()
}

void SmartSwitchDefinition():{} {
    StringExpression() <SMARTSWITCH> "{" SmartSwitchCaseDefinition() "}" // ToDo: Replace string expression by logical expression
}


// Integrated Funtions
void IsDatatype():{} {
    UnaryExpression() <CHECKTYPE_FUNCTION>
}

void ToDatatype():{} {
    UnaryExpression() <CONTERT_FUNCTION>
}

// Datatype
void BasicDatatype():{} {
    <INT> | <DOUBLE> | <CHAR> | <BOOLEAN> | <STRING> | <TYPE> | <IDENTIFIER>
}


void Datatype():{} {
    BasicDatatype() ("[]")*
}

void ReturnDatatype():{} {
    Datatype() | <VOID>
}